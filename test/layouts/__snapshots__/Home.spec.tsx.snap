// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Home should render without error 1`] = `
<HomeWithTheme>
  <ThemeProvider
    theme={
      Object {
        "breakpoints": Object {
          "between": [Function],
          "down": [Function],
          "keys": Array [
            "xs",
            "sm",
            "md",
            "lg",
            "xl",
          ],
          "only": [Function],
          "up": [Function],
          "values": Object {
            "lg": 1280,
            "md": 960,
            "sm": 600,
            "xl": 1920,
            "xs": 0,
          },
          "width": [Function],
        },
        "direction": "ltr",
        "mixins": Object {
          "gutters": [Function],
          "toolbar": Object {
            "@media (min-width:0px) and (orientation: landscape)": Object {
              "minHeight": 48,
            },
            "@media (min-width:600px)": Object {
              "minHeight": 64,
            },
            "minHeight": 56,
          },
        },
        "overrides": Object {
          "MuiTypography": Object {
            "h1": Object {
              "fontFamily": "Montserrat",
              "fontWeight": 900,
            },
            "h2": Object {
              "fontFamily": "Montserrat",
              "fontWeight": 900,
            },
            "h3": Object {
              "fontFamily": "Montserrat",
              "fontWeight": 900,
            },
            "h4": Object {
              "fontFamily": "Montserrat",
              "fontWeight": 900,
            },
            "h5": Object {
              "fontFamily": "Montserrat",
              "fontWeight": 900,
            },
            "h6": Object {
              "fontFamily": "Montserrat",
              "fontWeight": 900,
            },
            "subtitle1": Object {
              "fontWeight": "bold",
            },
            "subtitle2": Object {
              "fontWeight": "bold",
            },
          },
        },
        "palette": Object {
          "action": Object {
            "activatedOpacity": 0.12,
            "active": "rgba(0, 0, 0, 0.54)",
            "disabled": "rgba(0, 0, 0, 0.26)",
            "disabledBackground": "rgba(0, 0, 0, 0.12)",
            "disabledOpacity": 0.38,
            "focus": "rgba(0, 0, 0, 0.12)",
            "focusOpacity": 0.12,
            "hover": "rgba(0, 0, 0, 0.04)",
            "hoverOpacity": 0.04,
            "selected": "rgba(0, 0, 0, 0.08)",
            "selectedOpacity": 0.08,
          },
          "augmentColor": [Function],
          "background": Object {
            "default": "#FFFFFF",
            "paper": "#FFFFFF",
          },
          "common": Object {
            "black": "#000000",
            "white": "#FFFFFF",
          },
          "contrastThreshold": 3,
          "custom": Object {
            "black40": "rgba(0, 0, 0, 0.40)",
            "black60": "rgba(0, 0, 0, 0.60)",
            "black75": "rgba(0, 0, 0, 0.75)",
            "charcoal": "#121516",
            "charcoalDark": "#0E1214",
            "charcoalLight": "#181C1E",
            "greyDark": "#DDE1E4",
            "greyDarker": "#CDD4D8",
            "greyDefault": "#EBEEEF",
            "greyLight": "#F9F9FA",
            "white60": "rgba(255, 255, 255, 0.60)",
            "white75": "rgba(255, 255, 255, 0.75)",
          },
          "divider": "rgba(0, 0, 0, 0.12)",
          "error": Object {
            "contrastText": "#fff",
            "dark": "#d32f2f",
            "light": "#e57373",
            "main": "#f44336",
          },
          "getContrastText": [Function],
          "grey": Object {
            "100": "#f5f5f5",
            "200": "#eeeeee",
            "300": "#e0e0e0",
            "400": "#bdbdbd",
            "50": "#fafafa",
            "500": "#9e9e9e",
            "600": "#757575",
            "700": "#616161",
            "800": "#424242",
            "900": "#212121",
            "A100": "#d5d5d5",
            "A200": "#aaaaaa",
            "A400": "#303030",
            "A700": "#616161",
          },
          "info": Object {
            "contrastText": "#fff",
            "dark": "#1976d2",
            "light": "#64b5f6",
            "main": "#2196f3",
          },
          "primary": Object {
            "contrastText": "#fff",
            "dark": "#A81432",
            "light": "#E15F79",
            "main": "#DB1A3F",
          },
          "secondary": Object {
            "contrastText": "#fff",
            "dark": "#365775",
            "light": "#4FBEFF",
            "main": "#2C92CD",
          },
          "success": Object {
            "contrastText": "rgba(0, 0, 0, 0.87)",
            "dark": "#388e3c",
            "light": "#81c784",
            "main": "#4caf50",
          },
          "text": Object {
            "disabled": " rgba(4, 28, 41, 0.75)",
            "divider": "#DDE1E4",
            "hint": " rgba(4, 28, 41, 0.75)",
            "primary": "rgba(4, 28, 41, 1)",
            "secondary": "rgba(4, 28, 41, 0.56)",
          },
          "tonalOffset": 0.2,
          "type": "light",
          "warning": Object {
            "contrastText": "rgba(0, 0, 0, 0.87)",
            "dark": "#f57c00",
            "light": "#ffb74d",
            "main": "#ff9800",
          },
        },
        "props": Object {},
        "shadows": Array [
          "none",
          "0px 2px 1px -1px rgba(0,0,0,0.2),0px 1px 1px 0px rgba(0,0,0,0.14),0px 1px 3px 0px rgba(0,0,0,0.12)",
          "0px 3px 1px -2px rgba(0,0,0,0.2),0px 2px 2px 0px rgba(0,0,0,0.14),0px 1px 5px 0px rgba(0,0,0,0.12)",
          "0px 3px 3px -2px rgba(0,0,0,0.2),0px 3px 4px 0px rgba(0,0,0,0.14),0px 1px 8px 0px rgba(0,0,0,0.12)",
          "0px 2px 4px -1px rgba(0,0,0,0.2),0px 4px 5px 0px rgba(0,0,0,0.14),0px 1px 10px 0px rgba(0,0,0,0.12)",
          "0px 3px 5px -1px rgba(0,0,0,0.2),0px 5px 8px 0px rgba(0,0,0,0.14),0px 1px 14px 0px rgba(0,0,0,0.12)",
          "0px 3px 5px -1px rgba(0,0,0,0.2),0px 6px 10px 0px rgba(0,0,0,0.14),0px 1px 18px 0px rgba(0,0,0,0.12)",
          "0px 4px 5px -2px rgba(0,0,0,0.2),0px 7px 10px 1px rgba(0,0,0,0.14),0px 2px 16px 1px rgba(0,0,0,0.12)",
          "0px 5px 5px -3px rgba(0,0,0,0.2),0px 8px 10px 1px rgba(0,0,0,0.14),0px 3px 14px 2px rgba(0,0,0,0.12)",
          "0px 5px 6px -3px rgba(0,0,0,0.2),0px 9px 12px 1px rgba(0,0,0,0.14),0px 3px 16px 2px rgba(0,0,0,0.12)",
          "0px 6px 6px -3px rgba(0,0,0,0.2),0px 10px 14px 1px rgba(0,0,0,0.14),0px 4px 18px 3px rgba(0,0,0,0.12)",
          "0px 6px 7px -4px rgba(0,0,0,0.2),0px 11px 15px 1px rgba(0,0,0,0.14),0px 4px 20px 3px rgba(0,0,0,0.12)",
          "0px 7px 8px -4px rgba(0,0,0,0.2),0px 12px 17px 2px rgba(0,0,0,0.14),0px 5px 22px 4px rgba(0,0,0,0.12)",
          "0px 7px 8px -4px rgba(0,0,0,0.2),0px 13px 19px 2px rgba(0,0,0,0.14),0px 5px 24px 4px rgba(0,0,0,0.12)",
          "0px 7px 9px -4px rgba(0,0,0,0.2),0px 14px 21px 2px rgba(0,0,0,0.14),0px 5px 26px 4px rgba(0,0,0,0.12)",
          "0px 8px 9px -5px rgba(0,0,0,0.2),0px 15px 22px 2px rgba(0,0,0,0.14),0px 6px 28px 5px rgba(0,0,0,0.12)",
          "0px 8px 10px -5px rgba(0,0,0,0.2),0px 16px 24px 2px rgba(0,0,0,0.14),0px 6px 30px 5px rgba(0,0,0,0.12)",
          "0px 8px 11px -5px rgba(0,0,0,0.2),0px 17px 26px 2px rgba(0,0,0,0.14),0px 6px 32px 5px rgba(0,0,0,0.12)",
          "0px 9px 11px -5px rgba(0,0,0,0.2),0px 18px 28px 2px rgba(0,0,0,0.14),0px 7px 34px 6px rgba(0,0,0,0.12)",
          "0px 9px 12px -6px rgba(0,0,0,0.2),0px 19px 29px 2px rgba(0,0,0,0.14),0px 7px 36px 6px rgba(0,0,0,0.12)",
          "0px 10px 13px -6px rgba(0,0,0,0.2),0px 20px 31px 3px rgba(0,0,0,0.14),0px 8px 38px 7px rgba(0,0,0,0.12)",
          "0px 10px 13px -6px rgba(0,0,0,0.2),0px 21px 33px 3px rgba(0,0,0,0.14),0px 8px 40px 7px rgba(0,0,0,0.12)",
          "0px 10px 14px -6px rgba(0,0,0,0.2),0px 22px 35px 3px rgba(0,0,0,0.14),0px 8px 42px 7px rgba(0,0,0,0.12)",
          "0px 11px 14px -7px rgba(0,0,0,0.2),0px 23px 36px 3px rgba(0,0,0,0.14),0px 9px 44px 8px rgba(0,0,0,0.12)",
          "0px 11px 15px -7px rgba(0,0,0,0.2),0px 24px 38px 3px rgba(0,0,0,0.14),0px 9px 46px 8px rgba(0,0,0,0.12)",
        ],
        "shape": Object {
          "borderRadius": 4,
        },
        "spacing": [Function],
        "transitions": Object {
          "create": [Function],
          "duration": Object {
            "complex": 375,
            "enteringScreen": 225,
            "leavingScreen": 195,
            "short": 250,
            "shorter": 200,
            "shortest": 150,
            "standard": 300,
          },
          "easing": Object {
            "easeIn": "cubic-bezier(0.4, 0, 1, 1)",
            "easeInOut": "cubic-bezier(0.4, 0, 0.2, 1)",
            "easeOut": "cubic-bezier(0.0, 0, 0.2, 1)",
            "sharp": "cubic-bezier(0.4, 0, 0.6, 1)",
          },
          "getAutoHeightDuration": [Function],
        },
        "typography": Object {
          "body1": Object {
            "fontFamily": "Lato",
            "fontSize": "1rem",
            "fontWeight": 400,
            "lineHeight": 1.5,
          },
          "body2": Object {
            "fontFamily": "Lato",
            "fontSize": "0.875rem",
            "fontWeight": 400,
            "lineHeight": 1.43,
          },
          "button": Object {
            "fontFamily": "Lato",
            "fontSize": "0.875rem",
            "fontWeight": 500,
            "lineHeight": 1.75,
            "textTransform": "uppercase",
          },
          "caption": Object {
            "fontFamily": "Lato",
            "fontSize": "0.75rem",
            "fontWeight": 400,
            "lineHeight": 1.66,
          },
          "fontFamily": "Lato",
          "fontSize": 14,
          "fontWeightBold": 700,
          "fontWeightLight": 300,
          "fontWeightMedium": 500,
          "fontWeightRegular": 400,
          "h1": Object {
            "@media (min-width:1280px)": Object {
              "fontSize": "5.9983rem",
            },
            "@media (min-width:600px)": Object {
              "fontSize": "4.7129rem",
            },
            "@media (min-width:960px)": Object {
              "fontSize": "5.3556rem",
            },
            "fontFamily": "Lato",
            "fontSize": "3.5rem",
            "fontWeight": 300,
            "lineHeight": 1.167,
          },
          "h2": Object {
            "@media (min-width:1280px)": Object {
              "fontSize": "3.75rem",
            },
            "@media (min-width:600px)": Object {
              "fontSize": "2.9167rem",
            },
            "@media (min-width:960px)": Object {
              "fontSize": "3.3333rem",
            },
            "fontFamily": "Lato",
            "fontSize": "2.375rem",
            "fontWeight": 300,
            "lineHeight": 1.2,
          },
          "h3": Object {
            "@media (min-width:1280px)": Object {
              "fontSize": "2.9991rem",
            },
            "@media (min-width:600px)": Object {
              "fontSize": "2.5707rem",
            },
            "@media (min-width:960px)": Object {
              "fontSize": "2.7849rem",
            },
            "fontFamily": "Lato",
            "fontSize": "2rem",
            "fontWeight": 400,
            "lineHeight": 1.167,
          },
          "h4": Object {
            "@media (min-width:1280px)": Object {
              "fontSize": "2.0243rem",
            },
            "@media (min-width:600px)": Object {
              "fontSize": "1.8219rem",
            },
            "@media (min-width:960px)": Object {
              "fontSize": "2.0243rem",
            },
            "fontFamily": "Lato",
            "fontSize": "1.5625rem",
            "fontWeight": 400,
            "lineHeight": 1.235,
          },
          "h5": Object {
            "@media (min-width:1280px)": Object {
              "fontSize": "1.4993rem",
            },
            "@media (min-width:600px)": Object {
              "fontSize": "1.3118rem",
            },
            "@media (min-width:960px)": Object {
              "fontSize": "1.4993rem",
            },
            "fontFamily": "Lato",
            "fontSize": "1.25rem",
            "fontWeight": 400,
            "lineHeight": 1.334,
          },
          "h6": Object {
            "@media (min-width:1280px)": Object {
              "fontSize": "1.25rem",
            },
            "@media (min-width:600px)": Object {
              "fontSize": "1.25rem",
            },
            "@media (min-width:960px)": Object {
              "fontSize": "1.25rem",
            },
            "fontFamily": "Lato",
            "fontSize": "1.125rem",
            "fontWeight": 500,
            "lineHeight": 1.6,
          },
          "htmlFontSize": 16,
          "overline": Object {
            "fontFamily": "Lato",
            "fontSize": "0.75rem",
            "fontWeight": 400,
            "lineHeight": 2.66,
            "textTransform": "uppercase",
          },
          "pxToRem": [Function],
          "round": [Function],
          "subtitle1": Object {
            "fontFamily": "Lato",
            "fontSize": "1rem",
            "fontWeight": 400,
            "lineHeight": 1.75,
          },
          "subtitle2": Object {
            "fontFamily": "Lato",
            "fontSize": "0.875rem",
            "fontWeight": 500,
            "lineHeight": 1.57,
          },
        },
        "zIndex": Object {
          "appBar": 1100,
          "drawer": 1200,
          "mobileStepper": 1000,
          "modal": 1300,
          "snackbar": 1400,
          "speedDial": 1050,
          "tooltip": 1500,
        },
        Symbol(mui.nested): false,
      }
    }
  >
    <Index>
      <Home>
        <AppBar>
          <ElevationScroll>
            <WithStyles(ForwardRef(AppBar))
              color="secondary"
              elevation={0}
            >
              <ForwardRef(AppBar)
                classes={
                  Object {
                    "colorDefault": "MuiAppBar-colorDefault",
                    "colorInherit": "MuiAppBar-colorInherit",
                    "colorPrimary": "MuiAppBar-colorPrimary",
                    "colorSecondary": "MuiAppBar-colorSecondary",
                    "colorTransparent": "MuiAppBar-colorTransparent",
                    "positionAbsolute": "MuiAppBar-positionAbsolute",
                    "positionFixed": "MuiAppBar-positionFixed",
                    "positionRelative": "MuiAppBar-positionRelative",
                    "positionStatic": "MuiAppBar-positionStatic",
                    "positionSticky": "MuiAppBar-positionSticky",
                    "root": "MuiAppBar-root",
                  }
                }
                color="secondary"
                elevation={0}
              >
                <WithStyles(ForwardRef(Paper))
                  className="MuiAppBar-root MuiAppBar-positionFixed MuiAppBar-colorSecondary mui-fixed"
                  component="header"
                  elevation={0}
                  square={true}
                >
                  <ForwardRef(Paper)
                    className="MuiAppBar-root MuiAppBar-positionFixed MuiAppBar-colorSecondary mui-fixed"
                    classes={
                      Object {
                        "elevation0": "MuiPaper-elevation0",
                        "elevation1": "MuiPaper-elevation1",
                        "elevation10": "MuiPaper-elevation10",
                        "elevation11": "MuiPaper-elevation11",
                        "elevation12": "MuiPaper-elevation12",
                        "elevation13": "MuiPaper-elevation13",
                        "elevation14": "MuiPaper-elevation14",
                        "elevation15": "MuiPaper-elevation15",
                        "elevation16": "MuiPaper-elevation16",
                        "elevation17": "MuiPaper-elevation17",
                        "elevation18": "MuiPaper-elevation18",
                        "elevation19": "MuiPaper-elevation19",
                        "elevation2": "MuiPaper-elevation2",
                        "elevation20": "MuiPaper-elevation20",
                        "elevation21": "MuiPaper-elevation21",
                        "elevation22": "MuiPaper-elevation22",
                        "elevation23": "MuiPaper-elevation23",
                        "elevation24": "MuiPaper-elevation24",
                        "elevation3": "MuiPaper-elevation3",
                        "elevation4": "MuiPaper-elevation4",
                        "elevation5": "MuiPaper-elevation5",
                        "elevation6": "MuiPaper-elevation6",
                        "elevation7": "MuiPaper-elevation7",
                        "elevation8": "MuiPaper-elevation8",
                        "elevation9": "MuiPaper-elevation9",
                        "outlined": "MuiPaper-outlined",
                        "root": "MuiPaper-root",
                        "rounded": "MuiPaper-rounded",
                      }
                    }
                    component="header"
                    elevation={0}
                    square={true}
                  >
                    <header
                      className="MuiPaper-root MuiAppBar-root MuiAppBar-positionFixed MuiAppBar-colorSecondary mui-fixed MuiPaper-elevation0"
                    >
                      <WithStyles(ForwardRef(Toolbar))
                        classes={
                          Object {
                            "root": "makeStyles-root-3",
                          }
                        }
                      >
                        <ForwardRef(Toolbar)
                          classes={
                            Object {
                              "dense": "MuiToolbar-dense",
                              "gutters": "MuiToolbar-gutters",
                              "regular": "MuiToolbar-regular",
                              "root": "MuiToolbar-root makeStyles-root-3",
                            }
                          }
                        >
                          <div
                            className="MuiToolbar-root makeStyles-root-3 MuiToolbar-regular MuiToolbar-gutters"
                          >
                            <div
                              className="makeStyles-flexRowBase-4 makeStyles-toolbarLeft-6"
                            >
                              <Hidden
                                mdUp={true}
                              >
                                <WithWidth(HiddenJs)
                                  lgDown={false}
                                  lgUp={false}
                                  mdDown={false}
                                  mdUp={true}
                                  smDown={false}
                                  smUp={false}
                                  xlDown={false}
                                  xlUp={false}
                                  xsDown={false}
                                  xsUp={false}
                                />
                              </Hidden>
                              <Hidden
                                smDown={true}
                              >
                                <WithWidth(HiddenJs)
                                  lgDown={false}
                                  lgUp={false}
                                  mdDown={false}
                                  mdUp={false}
                                  smDown={true}
                                  smUp={false}
                                  xlDown={false}
                                  xlUp={false}
                                  xsDown={false}
                                  xsUp={false}
                                />
                              </Hidden>
                            </div>
                            <div
                              className="makeStyles-flexRowBase-4 makeStyles-toolbarCenter-7"
                            >
                              <Hidden
                                smDown={true}
                              >
                                <WithWidth(HiddenJs)
                                  lgDown={false}
                                  lgUp={false}
                                  mdDown={false}
                                  mdUp={false}
                                  smDown={true}
                                  smUp={false}
                                  xlDown={false}
                                  xlUp={false}
                                  xsDown={false}
                                  xsUp={false}
                                />
                              </Hidden>
                            </div>
                            <div
                              className="makeStyles-flexRowBase-4 makeStyles-toolbarRight-8"
                            >
                              <div
                                className="makeStyles-flexRowBase-4 makeStyles-rowSpaceBetween-5"
                              >
                                <div
                                  className="makeStyles-socialLinkContainer-11"
                                >
                                  <SocialMediaLink
                                    color="dark"
                                    href="https://github.com/"
                                    iconSize="small"
                                    variant="github"
                                  >
                                    <WithStyles(ForwardRef(IconButton))
                                      classes={
                                        Object {
                                          "root": "makeStyles-root-55",
                                        }
                                      }
                                      component="a"
                                      href="https://github.com/"
                                      target="_blank"
                                    >
                                      <ForwardRef(IconButton)
                                        classes={
                                          Object {
                                            "colorInherit": "MuiIconButton-colorInherit",
                                            "colorPrimary": "MuiIconButton-colorPrimary",
                                            "colorSecondary": "MuiIconButton-colorSecondary",
                                            "disabled": "Mui-disabled",
                                            "edgeEnd": "MuiIconButton-edgeEnd",
                                            "edgeStart": "MuiIconButton-edgeStart",
                                            "label": "MuiIconButton-label",
                                            "root": "MuiIconButton-root makeStyles-root-55",
                                            "sizeSmall": "MuiIconButton-sizeSmall",
                                          }
                                        }
                                        component="a"
                                        href="https://github.com/"
                                        target="_blank"
                                      >
                                        <WithStyles(ForwardRef(ButtonBase))
                                          centerRipple={true}
                                          className="MuiIconButton-root makeStyles-root-55"
                                          component="a"
                                          disabled={false}
                                          focusRipple={true}
                                          href="https://github.com/"
                                          target="_blank"
                                        >
                                          <ForwardRef(ButtonBase)
                                            centerRipple={true}
                                            className="MuiIconButton-root makeStyles-root-55"
                                            classes={
                                              Object {
                                                "disabled": "Mui-disabled",
                                                "focusVisible": "Mui-focusVisible",
                                                "root": "MuiButtonBase-root",
                                              }
                                            }
                                            component="a"
                                            disabled={false}
                                            focusRipple={true}
                                            href="https://github.com/"
                                            target="_blank"
                                          >
                                            <a
                                              aria-disabled={false}
                                              className="MuiButtonBase-root MuiIconButton-root makeStyles-root-55"
                                              href="https://github.com/"
                                              onBlur={[Function]}
                                              onDragLeave={[Function]}
                                              onFocus={[Function]}
                                              onKeyDown={[Function]}
                                              onKeyUp={[Function]}
                                              onMouseDown={[Function]}
                                              onMouseLeave={[Function]}
                                              onMouseUp={[Function]}
                                              onTouchEnd={[Function]}
                                              onTouchMove={[Function]}
                                              onTouchStart={[Function]}
                                              tabIndex={0}
                                              target="_blank"
                                            >
                                              <span
                                                className="MuiIconButton-label"
                                              >
                                                <GitHub
                                                  color="#FFFFFF"
                                                  size={16}
                                                >
                                                  <svg
                                                    fill="none"
                                                    height={16}
                                                    stroke="#FFFFFF"
                                                    strokeLinecap="round"
                                                    strokeLinejoin="round"
                                                    strokeWidth="2"
                                                    viewBox="0 0 24 24"
                                                    width={16}
                                                    xmlns="http://www.w3.org/2000/svg"
                                                  >
                                                    <path
                                                      d="M9 19c-5 1.5-5-2.5-7-3m14 6v-3.87a3.37 3.37 0 0 0-.94-2.61c3.14-.35 6.44-1.54 6.44-7A5.44 5.44 0 0 0 20 4.77 5.07 5.07 0 0 0 19.91 1S18.73.65 16 2.48a13.38 13.38 0 0 0-7 0C6.27.65 5.09 1 5.09 1A5.07 5.07 0 0 0 5 4.77a5.44 5.44 0 0 0-1.5 3.78c0 5.42 3.3 6.61 6.44 7A3.37 3.37 0 0 0 9 18.13V22"
                                                    />
                                                  </svg>
                                                </GitHub>
                                              </span>
                                              <WithStyles(memo)
                                                center={true}
                                              >
                                                <ForwardRef(TouchRipple)
                                                  center={true}
                                                  classes={
                                                    Object {
                                                      "child": "MuiTouchRipple-child",
                                                      "childLeaving": "MuiTouchRipple-childLeaving",
                                                      "childPulsate": "MuiTouchRipple-childPulsate",
                                                      "ripple": "MuiTouchRipple-ripple",
                                                      "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                                                      "rippleVisible": "MuiTouchRipple-rippleVisible",
                                                      "root": "MuiTouchRipple-root",
                                                    }
                                                  }
                                                >
                                                  <span
                                                    className="MuiTouchRipple-root"
                                                  >
                                                    <TransitionGroup
                                                      childFactory={[Function]}
                                                      component={null}
                                                      exit={true}
                                                    />
                                                  </span>
                                                </ForwardRef(TouchRipple)>
                                              </WithStyles(memo)>
                                            </a>
                                          </ForwardRef(ButtonBase)>
                                        </WithStyles(ForwardRef(ButtonBase))>
                                      </ForwardRef(IconButton)>
                                    </WithStyles(ForwardRef(IconButton))>
                                  </SocialMediaLink>
                                </div>
                                <div
                                  className="makeStyles-socialLinkContainer-11"
                                >
                                  <Tooltip
                                    arrow={true}
                                    title="See more works by Jesse"
                                  >
                                    <WithStyles(ForwardRef(Tooltip))
                                      arrow={true}
                                      classes={
                                        Object {
                                          "arrow": "makeStyles-arrow-72",
                                          "tooltip": "makeStyles-tooltip-71",
                                        }
                                      }
                                      title="See more works by Jesse"
                                    >
                                      <ForwardRef(Tooltip)
                                        arrow={true}
                                        classes={
                                          Object {
                                            "arrow": "MuiTooltip-arrow makeStyles-arrow-72",
                                            "popper": "MuiTooltip-popper",
                                            "popperArrow": "MuiTooltip-popperArrow",
                                            "popperInteractive": "MuiTooltip-popperInteractive",
                                            "tooltip": "MuiTooltip-tooltip makeStyles-tooltip-71",
                                            "tooltipArrow": "MuiTooltip-tooltipArrow",
                                            "tooltipPlacementBottom": "MuiTooltip-tooltipPlacementBottom",
                                            "tooltipPlacementLeft": "MuiTooltip-tooltipPlacementLeft",
                                            "tooltipPlacementRight": "MuiTooltip-tooltipPlacementRight",
                                            "tooltipPlacementTop": "MuiTooltip-tooltipPlacementTop",
                                            "touch": "MuiTooltip-touch",
                                          }
                                        }
                                        title="See more works by Jesse"
                                      >
                                        <div
                                          aria-describedby={null}
                                          className=""
                                          onBlur={[Function]}
                                          onFocus={[Function]}
                                          onMouseLeave={[Function]}
                                          onMouseOver={[Function]}
                                          onTouchEnd={[Function]}
                                          onTouchStart={[Function]}
                                          title="See more works by Jesse"
                                        >
                                          <Link
                                            external={false}
                                            href="//z-nith.design"
                                            variant="wrapper"
                                          >
                                            <ForwardRef
                                              href="//z-nith.design"
                                            >
                                              <BaseLink
                                                href="//z-nith.design"
                                                innerRef={null}
                                              >
                                                <WithStyles(ForwardRef(Link))
                                                  className=""
                                                  component={
                                                    Object {
                                                      "$$typeof": Symbol(react.forward_ref),
                                                      "propTypes": Object {},
                                                      "render": [Function],
                                                    }
                                                  }
                                                  href="//z-nith.design"
                                                >
                                                  <ForwardRef(Link)
                                                    className=""
                                                    classes={
                                                      Object {
                                                        "button": "MuiLink-button",
                                                        "focusVisible": "Mui-focusVisible",
                                                        "root": "MuiLink-root",
                                                        "underlineAlways": "MuiLink-underlineAlways",
                                                        "underlineHover": "MuiLink-underlineHover",
                                                        "underlineNone": "MuiLink-underlineNone",
                                                      }
                                                    }
                                                    component={
                                                      Object {
                                                        "$$typeof": Symbol(react.forward_ref),
                                                        "propTypes": Object {},
                                                        "render": [Function],
                                                      }
                                                    }
                                                    href="//z-nith.design"
                                                  >
                                                    <WithStyles(ForwardRef(Typography))
                                                      className="MuiLink-root MuiLink-underlineHover"
                                                      color="primary"
                                                      component={
                                                        Object {
                                                          "$$typeof": Symbol(react.forward_ref),
                                                          "propTypes": Object {},
                                                          "render": [Function],
                                                        }
                                                      }
                                                      href="//z-nith.design"
                                                      onBlur={[Function]}
                                                      onFocus={[Function]}
                                                      variant="inherit"
                                                    >
                                                      <ForwardRef(Typography)
                                                        className="MuiLink-root MuiLink-underlineHover"
                                                        classes={
                                                          Object {
                                                            "alignCenter": "MuiTypography-alignCenter",
                                                            "alignJustify": "MuiTypography-alignJustify",
                                                            "alignLeft": "MuiTypography-alignLeft",
                                                            "alignRight": "MuiTypography-alignRight",
                                                            "body1": "MuiTypography-body1",
                                                            "body2": "MuiTypography-body2",
                                                            "button": "MuiTypography-button",
                                                            "caption": "MuiTypography-caption",
                                                            "colorError": "MuiTypography-colorError",
                                                            "colorInherit": "MuiTypography-colorInherit",
                                                            "colorPrimary": "MuiTypography-colorPrimary",
                                                            "colorSecondary": "MuiTypography-colorSecondary",
                                                            "colorTextPrimary": "MuiTypography-colorTextPrimary",
                                                            "colorTextSecondary": "MuiTypography-colorTextSecondary",
                                                            "displayBlock": "MuiTypography-displayBlock",
                                                            "displayInline": "MuiTypography-displayInline",
                                                            "gutterBottom": "MuiTypography-gutterBottom",
                                                            "h1": "MuiTypography-h1",
                                                            "h2": "MuiTypography-h2",
                                                            "h3": "MuiTypography-h3",
                                                            "h4": "MuiTypography-h4",
                                                            "h5": "MuiTypography-h5",
                                                            "h6": "MuiTypography-h6",
                                                            "noWrap": "MuiTypography-noWrap",
                                                            "overline": "MuiTypography-overline",
                                                            "paragraph": "MuiTypography-paragraph",
                                                            "root": "MuiTypography-root",
                                                            "srOnly": "MuiTypography-srOnly",
                                                            "subtitle1": "MuiTypography-subtitle1",
                                                            "subtitle2": "MuiTypography-subtitle2",
                                                          }
                                                        }
                                                        color="primary"
                                                        component={
                                                          Object {
                                                            "$$typeof": Symbol(react.forward_ref),
                                                            "propTypes": Object {},
                                                            "render": [Function],
                                                          }
                                                        }
                                                        href="//z-nith.design"
                                                        onBlur={[Function]}
                                                        onFocus={[Function]}
                                                        variant="inherit"
                                                      >
                                                        <ForwardRef(NextComposed)
                                                          className="MuiTypography-root MuiLink-root MuiLink-underlineHover MuiTypography-colorPrimary"
                                                          href="//z-nith.design"
                                                          onBlur={[Function]}
                                                          onFocus={[Function]}
                                                        >
                                                          <Link
                                                            href="//z-nith.design"
                                                          >
                                                            <a
                                                              className="MuiTypography-root MuiLink-root MuiLink-underlineHover MuiTypography-colorPrimary"
                                                              href="//z-nith.design"
                                                              onBlur={[Function]}
                                                              onClick={[Function]}
                                                              onFocus={[Function]}
                                                              onMouseEnter={[Function]}
                                                            >
                                                              <Avatar
                                                                alt="Developer: Jesse Meza"
                                                                imgSize="large"
                                                                src="/img/author_avatar.jpg"
                                                              >
                                                                <WithStyles(ForwardRef(Avatar))
                                                                  alt="Developer: Jesse Meza"
                                                                  className="makeStyles-large-127"
                                                                  src="/img/author_avatar.jpg"
                                                                >
                                                                  <ForwardRef(Avatar)
                                                                    alt="Developer: Jesse Meza"
                                                                    className="makeStyles-large-127"
                                                                    classes={
                                                                      Object {
                                                                        "circle": "MuiAvatar-circle",
                                                                        "colorDefault": "MuiAvatar-colorDefault",
                                                                        "fallback": "MuiAvatar-fallback",
                                                                        "img": "MuiAvatar-img",
                                                                        "root": "MuiAvatar-root",
                                                                        "rounded": "MuiAvatar-rounded",
                                                                        "square": "MuiAvatar-square",
                                                                      }
                                                                    }
                                                                    src="/img/author_avatar.jpg"
                                                                  >
                                                                    <div
                                                                      className="MuiAvatar-root MuiAvatar-circle makeStyles-large-127"
                                                                    >
                                                                      <img
                                                                        alt="Developer: Jesse Meza"
                                                                        className="MuiAvatar-img"
                                                                        src="/img/author_avatar.jpg"
                                                                      />
                                                                    </div>
                                                                  </ForwardRef(Avatar)>
                                                                </WithStyles(ForwardRef(Avatar))>
                                                              </Avatar>
                                                            </a>
                                                          </Link>
                                                        </ForwardRef(NextComposed)>
                                                      </ForwardRef(Typography)>
                                                    </WithStyles(ForwardRef(Typography))>
                                                  </ForwardRef(Link)>
                                                </WithStyles(ForwardRef(Link))>
                                              </BaseLink>
                                            </ForwardRef>
                                          </Link>
                                        </div>
                                        <ForwardRef(Popper)
                                          anchorEl={
                                            <div
                                              class=""
                                              title="See more works by Jesse"
                                            >
                                              <a
                                                class="MuiTypography-root MuiLink-root MuiLink-underlineHover MuiTypography-colorPrimary"
                                                href="//z-nith.design"
                                              >
                                                <div
                                                  class="MuiAvatar-root MuiAvatar-circle makeStyles-large-127"
                                                >
                                                  <img
                                                    alt="Developer: Jesse Meza"
                                                    class="MuiAvatar-img"
                                                    src="/img/author_avatar.jpg"
                                                  />
                                                </div>
                                              </a>
                                            </div>
                                          }
                                          className="MuiTooltip-popper MuiTooltip-popperArrow"
                                          id={null}
                                          open={false}
                                          placement="bottom"
                                          popperOptions={
                                            Object {
                                              "modifiers": Object {
                                                "arrow": Object {
                                                  "element": null,
                                                  "enabled": false,
                                                },
                                              },
                                            }
                                          }
                                          transition={true}
                                        />
                                      </ForwardRef(Tooltip)>
                                    </WithStyles(ForwardRef(Tooltip))>
                                  </Tooltip>
                                </div>
                              </div>
                            </div>
                          </div>
                        </ForwardRef(Toolbar)>
                      </WithStyles(ForwardRef(Toolbar))>
                    </header>
                  </ForwardRef(Paper)>
                </WithStyles(ForwardRef(Paper))>
              </ForwardRef(AppBar)>
            </WithStyles(ForwardRef(AppBar))>
          </ElevationScroll>
          <div
            id="back-to-top-anchor"
          />
        </AppBar>
        <div
          className="makeStyles-root-1"
        >
          <div
            style={
              Object {
                "paddingTop": "300px",
              }
            }
          >
            <WithStyles(ForwardRef(Typography))
              variant="h1"
            >
              <ForwardRef(Typography)
                classes={
                  Object {
                    "alignCenter": "MuiTypography-alignCenter",
                    "alignJustify": "MuiTypography-alignJustify",
                    "alignLeft": "MuiTypography-alignLeft",
                    "alignRight": "MuiTypography-alignRight",
                    "body1": "MuiTypography-body1",
                    "body2": "MuiTypography-body2",
                    "button": "MuiTypography-button",
                    "caption": "MuiTypography-caption",
                    "colorError": "MuiTypography-colorError",
                    "colorInherit": "MuiTypography-colorInherit",
                    "colorPrimary": "MuiTypography-colorPrimary",
                    "colorSecondary": "MuiTypography-colorSecondary",
                    "colorTextPrimary": "MuiTypography-colorTextPrimary",
                    "colorTextSecondary": "MuiTypography-colorTextSecondary",
                    "displayBlock": "MuiTypography-displayBlock",
                    "displayInline": "MuiTypography-displayInline",
                    "gutterBottom": "MuiTypography-gutterBottom",
                    "h1": "MuiTypography-h1",
                    "h2": "MuiTypography-h2",
                    "h3": "MuiTypography-h3",
                    "h4": "MuiTypography-h4",
                    "h5": "MuiTypography-h5",
                    "h6": "MuiTypography-h6",
                    "noWrap": "MuiTypography-noWrap",
                    "overline": "MuiTypography-overline",
                    "paragraph": "MuiTypography-paragraph",
                    "root": "MuiTypography-root",
                    "srOnly": "MuiTypography-srOnly",
                    "subtitle1": "MuiTypography-subtitle1",
                    "subtitle2": "MuiTypography-subtitle2",
                  }
                }
                variant="h1"
              >
                <h1
                  className="MuiTypography-root MuiTypography-h1"
                >
                  Light theme
                </h1>
              </ForwardRef(Typography)>
            </WithStyles(ForwardRef(Typography))>
            <div
              style={
                Object {
                  "minHeight": "1400px",
                  "width": "100%",
                }
              }
            />
          </div>
        </div>
        <ScrollToTopButton>
          <ScrollTop>
            <ForwardRef(Zoom)
              in={false}
            >
              <Transition
                appear={true}
                enter={true}
                exit={true}
                in={false}
                mountOnEnter={false}
                onEnter={[Function]}
                onEntered={[Function]}
                onEntering={[Function]}
                onExit={[Function]}
                onExited={[Function]}
                onExiting={[Function]}
                timeout={
                  Object {
                    "enter": 225,
                    "exit": 195,
                  }
                }
                unmountOnExit={false}
              >
                <div
                  className="makeStyles-root-135"
                  onClick={[Function]}
                  role="presentation"
                  style={
                    Object {
                      "transform": "scale(0)",
                      "visibility": "hidden",
                    }
                  }
                >
                  <WithStyles(ForwardRef(Fab))
                    aria-label="scroll back to top"
                    color="secondary"
                    size="large"
                  >
                    <ForwardRef(Fab)
                      aria-label="scroll back to top"
                      classes={
                        Object {
                          "colorInherit": "MuiFab-colorInherit",
                          "disabled": "Mui-disabled",
                          "extended": "MuiFab-extended",
                          "focusVisible": "Mui-focusVisible",
                          "label": "MuiFab-label",
                          "primary": "MuiFab-primary",
                          "root": "MuiFab-root",
                          "secondary": "MuiFab-secondary",
                          "sizeMedium": "MuiFab-sizeMedium",
                          "sizeSmall": "MuiFab-sizeSmall",
                        }
                      }
                      color="secondary"
                      size="large"
                    >
                      <WithStyles(ForwardRef(ButtonBase))
                        aria-label="scroll back to top"
                        className="MuiFab-root MuiFab-secondary"
                        component="button"
                        disabled={false}
                        focusRipple={true}
                        focusVisibleClassName="Mui-focusVisible"
                      >
                        <ForwardRef(ButtonBase)
                          aria-label="scroll back to top"
                          className="MuiFab-root MuiFab-secondary"
                          classes={
                            Object {
                              "disabled": "Mui-disabled",
                              "focusVisible": "Mui-focusVisible",
                              "root": "MuiButtonBase-root",
                            }
                          }
                          component="button"
                          disabled={false}
                          focusRipple={true}
                          focusVisibleClassName="Mui-focusVisible"
                        >
                          <button
                            aria-label="scroll back to top"
                            className="MuiButtonBase-root MuiFab-root MuiFab-secondary"
                            disabled={false}
                            onBlur={[Function]}
                            onDragLeave={[Function]}
                            onFocus={[Function]}
                            onKeyDown={[Function]}
                            onKeyUp={[Function]}
                            onMouseDown={[Function]}
                            onMouseLeave={[Function]}
                            onMouseUp={[Function]}
                            onTouchEnd={[Function]}
                            onTouchMove={[Function]}
                            onTouchStart={[Function]}
                            tabIndex={0}
                            type="button"
                          >
                            <span
                              className="MuiFab-label"
                            >
                              <ChevronUp
                                color="white"
                              >
                                <svg
                                  fill="none"
                                  height={24}
                                  stroke="white"
                                  strokeLinecap="round"
                                  strokeLinejoin="round"
                                  strokeWidth="2"
                                  viewBox="0 0 24 24"
                                  width={24}
                                  xmlns="http://www.w3.org/2000/svg"
                                >
                                  <polyline
                                    points="18 15 12 9 6 15"
                                  />
                                </svg>
                              </ChevronUp>
                            </span>
                            <WithStyles(memo)
                              center={false}
                            >
                              <ForwardRef(TouchRipple)
                                center={false}
                                classes={
                                  Object {
                                    "child": "MuiTouchRipple-child",
                                    "childLeaving": "MuiTouchRipple-childLeaving",
                                    "childPulsate": "MuiTouchRipple-childPulsate",
                                    "ripple": "MuiTouchRipple-ripple",
                                    "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                                    "rippleVisible": "MuiTouchRipple-rippleVisible",
                                    "root": "MuiTouchRipple-root",
                                  }
                                }
                              >
                                <span
                                  className="MuiTouchRipple-root"
                                >
                                  <TransitionGroup
                                    childFactory={[Function]}
                                    component={null}
                                    exit={true}
                                  />
                                </span>
                              </ForwardRef(TouchRipple)>
                            </WithStyles(memo)>
                          </button>
                        </ForwardRef(ButtonBase)>
                      </WithStyles(ForwardRef(ButtonBase))>
                    </ForwardRef(Fab)>
                  </WithStyles(ForwardRef(Fab))>
                </div>
              </Transition>
            </ForwardRef(Zoom)>
          </ScrollTop>
        </ScrollToTopButton>
      </Home>
    </Index>
  </ThemeProvider>
</HomeWithTheme>
`;
